<project name="Java Type Generator" default="compile_and_bin" basedir=".">

  <description>
      Build file for the Java Type Generator
  </description>

  <!-- set global properties that typically overwritten by Makefile -->
  <property name="DEPLOY_RUNTIME" location="/kb/runtime"/>
  <property name="TARGET"	location="/kb/deployment"/>

  <!-- set global properties for this build -->
  <property name="src"	location="src"/>
  <property name="out.lib"	location="${TARGET}/lib/jars"/>
  <property name="dist"	location="dist"/>
  <property name="out.bin"	location="${TARGET}/bin"/>
  <property name="out.jar"	location="${TARGET}/lib/jars/kbase"/>
  <property name="classes"	location="classes"/>
  <property name="test"	location="test"/>
  <property name="jar.file"	value="GenJavaTypes.jar"/>
  <property name="kidl.jar.file" value="kbase-kidl-parser.jar"/>
  <property name="sh.file"	value="gen_java_types"/>
  <property name="test.file"	value="test_gen_java_types.sh"/>

  <property environment="env"/>
  <condition property="lib" value="../jars/lib/jars/">
    <or>
      <equals arg1="${env.JENKINS_JARS_MODULE_PATH}" arg2=""/>
      <not>
        <isset property="env.JENKINS_JARS_MODULE_PATH"/>
      </not>
    </or>
  </condition>
  <!-- Properties in ant are immutable, so the following assignment will only take place if jardir was not set above. -->
  <property name="lib" location="${env.JENKINS_JARS_MODULE_PATH}/lib/jars"/>
  <condition property="commonjar" value="kbase/common/kbase-common-1413823460-2b8e352.jar">
    <or>
      <equals arg1="${env.JENKINS_JAVA_COMMON_JARFILE}" arg2=""/>
      <not>
        <isset property="env.JENKINS_JAVA_COMMON_JARFILE"/>
      </not>
    </or>
  </condition>
  <!-- Properties in ant are immutable, so the following assignment will only take place if jardir was not set above. -->
  <property name="commonjar" value="${env.JENKINS_JAVA_COMMON_JARFILE}"/>

  <target name="init">
    <!-- Create the output directory structure-->
    <mkdir dir="${classes}"/>
    <mkdir dir="${dist}"/>
    <mkdir dir="${test}"/>
    <mkdir dir="${out.lib}"/>
  </target>
	
  <target name="copy_kidl_jar" if="EXT_KIDL_JAR">
    <!-- copy the kidl jar to a versioned jar -->
    <copy file="${dist}/${kidl.jar.file}" tofile="${dist}/${EXT_KIDL_JAR}"/>
  </target>
	
  <target name="compile" depends="init" description="compile the source">
    <!-- Compile class files-->
    <javac destdir="${classes}" srcdir="${src}" includeantruntime="false" debug="true" classpathref="compile.classpath" />
    <!-- Copy resource files-->
    <copy todir="${classes}">
      <fileset dir="${src}">
        <patternset>
          <include name="**/*.properties"/>
        </patternset>
      </fileset>
    </copy>
    <!-- Make main jar file-->
    <jar destfile="${dist}/${jar.file}" basedir="${classes}">
      <manifest>
        <attribute name="Main-Class" value="us.kbase.scripts.JavaTypeGenerator"/>
      </manifest>
    </jar>
    <copy todir="${classes}">
      <fileset dir="${src}">
        <patternset>
          <include name="us/kbase/kidl/**/*.java"/>
          <include name="us/kbase/jkidl/**/*.java"/>
        </patternset>
      </fileset>
    </copy>
    <jar destfile="${dist}/${kidl.jar.file}">
      <fileset dir="${classes}">
        <include name="us/kbase/kidl/**"/>
        <include name="us/kbase/jkidl/**"/>
      </fileset>
    </jar>
    <!-- Remove uncompressed class files-->
    <delete dir="${classes}"/>
  </target>

  <path id="compile.classpath">
    <fileset dir="${lib}">
      <include name="kohsuke/args4j-2.0.21.jar"/>
      <include name="codemodel/codemodel-2.4.1.jar"/>
      <include name="apache_commons/commons-io-2.4.jar"/>
      <include name="ini4j/ini4j-0.5.2.jar"/>
      <include name="jackson/jackson-annotations-2.2.3.jar"/>
      <include name="jackson/jackson-core-2.2.3.jar"/>
      <include name="jackson/jackson-databind-2.2.3.jar"/>
      <include name="jetty/jetty-all-7.0.0.jar"/>
      <include name="jna/jna-3.4.0.jar"/>
      <include name="google/jsonschema2pojo-core-0.3.6.jar"/>
      <include name="junit/junit-4.9.jar"/>
      <include name="kbase/auth/kbase-auth-1380919426-d35c17d.jar"/>
      <include name="servlet/servlet-api-2.5.jar"/>
      <include name="syslog4j/syslog4j-0.9.46.jar"/>
      <include name="apache_commons/commons-lang-2.4.jar"/>
      <include name="${commonjar}"/>
    </fileset>
  </path>

  <target name="compile_and_bin" depends="compile,copy_kidl_jar" description="compile and create shell file in dev_container/bin" >
    <!-- Define list of lib-jar files-->
    <!-- Define absolute path to main jar file-->
    <property name="jar.absolute.path" location="${dist}/${jar.file}"/>
    <!-- Define classpath string with : delimiter from list of lib-jar files-->
    <pathconvert targetos="unix" property="lib.classpath" refid="compile.classpath"/>
    <!-- Create main shell script-->
    <echo file="${dist}/${sh.file}">#!/bin/sh
java -cp ${lib.classpath}:${jar.absolute.path} us.kbase.scripts.JavaTypeGenerator $@
    </echo>
    <chmod file="${dist}/${sh.file}" perm="a+x"/>
    <!-- Copy main shell script into dev_container bin folder-->
    <copy todir="${out.bin}" flatten="true">
      <fileset file="${dist}/${sh.file}"/>
    </copy>
    <chmod file="${out.bin}/${sh.file}" perm="a+x"/>
  </target>

  <target name="preparejunitreportdir" if="env.JENKINS_REPORT_DIR">
    <delete dir="${env.JENKINS_REPORT_DIR}"/>
    <mkdir dir="${env.JENKINS_REPORT_DIR}"/>
  </target>

  <target name="test" depends="compile, preparejunitreportdir" description="create test script">
    <!-- Define absolute path to main jar file-->
    <junit printsummary="yes" haltonfailure="yes" fork="true">
      <classpath>
        <pathelement location="${dist}/${jar.file}"/>
        <path refid="compile.classpath"/>
      </classpath>
      <formatter type="plain" usefile="false" />
      <formatter type="xml" usefile="true" if="env.JENKINS_REPORT_DIR"/>
      <batchtest todir="${env.JENKINS_REPORT_DIR}">
        <fileset dir="${src}">
          <include name="**/test/**/**Test.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="dist" depends="compile" description="generate the distribution" >
    <!-- Copy main jar file into deployment lib folder-->
    <copy todir="${out.jar}" flatten="true">
      <fileset file="${dist}/${jar.file}"/>
    </copy>
    <!-- Define list of lib-jar files-->
    <property name="absolute.lib" location="${lib}"/>
    <!-- Define absolute path to main jar file-->
    <property name="jar.absolute.path" location="${out.jar}/${jar.file}"/>
    <!-- Define classpath string with : delimiter from list of lib-jar files-->
    <pathconvert targetos="unix" property="dist.lib.classpath" refid="compile.classpath">
      <map from="${absolute.lib}" to="${out.lib}"/>
    </pathconvert>
    <!-- Create main shell script-->
    <echo file="${dist}/${sh.file}">#!/bin/sh
java -cp ${dist.lib.classpath}:${jar.absolute.path} us.kbase.scripts.JavaTypeGenerator $@
    </echo>
    <chmod file="${dist}/${sh.file}" perm="a+x"/>
    <!-- Copy main shell script into deployment bin folder-->
    <copy todir="${out.bin}" flatten="true">
      <fileset file="${dist}/${sh.file}"/>
    </copy>
    <chmod file="${out.bin}/${sh.file}" perm="a+x"/>
  </target>

  <target name="clean" description="clean up" >
    <!-- Clean up internal temporary files and folders-->
    <delete dir="${classes}"/>
    <delete dir="${dist}"/>
    <delete dir="${test}"/>
  </target>
</project>

