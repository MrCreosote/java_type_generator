package gov.doe.kbase;

import java.net.*;
import java.io.*;
import java.util.*;

import javax.net.ssl.HttpsURLConnection;
import javax.xml.bind.DatatypeConverter;

import org.codehaus.jackson.*;
import org.codehaus.jackson.type.*;
import org.codehaus.jackson.map.ObjectMapper;

public class JsonClientCaller {

	private URL urlobj;
	private ObjectMapper mapper;
	private String user = null;
	private char[] password = null;
	private String accessToken = null;
	private static Map<String, String> user2token = Collections.synchronizedMap(new HashMap<String, String>());

	public JsonClientCaller(String url) throws MalformedURLException {
		this.urlobj = new URL(url);
		mapper = new ObjectMapper().withModule(new JacksonTupleModule());
	}

	public JsonClientCaller(String url, String accessToken) throws MalformedURLException {
		this(url);
		this.accessToken = accessToken;
	}

	public JsonClientCaller(String url, String user, String password) throws MalformedURLException {
		this(url);
		this.user = user;
		this.password = password.toCharArray();
	}

	private HttpURLConnection setupCall(boolean authRequired) throws Exception {
		HttpURLConnection conn = (HttpURLConnection) urlobj.openConnection();
		conn.setDoOutput(true);
		conn.setRequestMethod("POST");
		if (authRequired) {
			if (!(conn instanceof HttpsURLConnection)) {
				throw new IllegalStateException("RPC method required authentication shouldn't be called through unsecured http, use https instead");
			}
			if (accessToken == null) {
				if (user == null) {
					throw new IllegalStateException("RPC method requires authentication but neither user nor token was set");
				}
				accessToken = user2token.get(user);
				if (accessToken == null) {
					String authUrl = "https://nexus.api.globusonline.org/goauth/token?grant_type=client_credentials&client_id=rsutormin";
					HttpURLConnection authConn = (HttpURLConnection)new URL(authUrl).openConnection();
					String credential = DatatypeConverter.printBase64Binary((user + ":" + new String(password)).getBytes());
					System.out.println(credential);
					authConn.setRequestMethod("POST");
					authConn.setRequestProperty("Content-Type", "application/json");
					authConn.setRequestProperty  ("Authorization", "Basic " + credential);
					authConn.setDoOutput(true);
					InputStream is = authConn.getInputStream();
					BufferedReader rd = new BufferedReader(new InputStreamReader(is));
					StringBuilder response = new StringBuilder(); 
					while(true) {
						String line = rd.readLine();
						if (line == null)
							break;
						response.append(line);
						response.append('\r');
					}
					rd.close();
					JsonParser parser = mapper.getJsonFactory().createJsonParser(new ByteArrayInputStream(response.toString().getBytes()));
					LinkedHashMap<String, Object> respMap = parser.readValueAs(new TypeReference<LinkedHashMap<String, Object>>() {});
					accessToken = (String)respMap.get("access_token");
					user2token.put(user, accessToken);
				}
			}
			conn.setRequestProperty("Authorization", accessToken);
		}
		return conn;
	}
	
	public <ARG, RET> RET jsonrpcCall(String method, ARG arg, TypeReference<RET> cls, boolean ret, boolean authRequired) throws Exception {
		HttpURLConnection conn = setupCall(authRequired);
		OutputStream os = conn.getOutputStream();
		JsonGenerator g = mapper.getJsonFactory().createJsonGenerator(os, JsonEncoding.UTF8);

		g.writeStartObject();
		g.writeObjectField("params", arg);
		g.writeStringField("method", method);
		g.writeStringField("version", "1.1");
		g.writeEndObject();
		g.close();

		int code = conn.getResponseCode();
		conn.getResponseMessage();

		InputStream istream;
		if (code == 500) {
			istream = conn.getErrorStream();
		} else {
			istream = conn.getInputStream();
		}

		JsonNode node = mapper.readTree(new UnclosableInputStream(istream));
		if (node.has("error")) {
			Map<String, String> ret_error = mapper.readValue(node.get("error"), new TypeReference<Map<String, String>>(){});
			throw new Exception("JSONRPC error received: " + ret_error);
		}
		RET res = null;
		if (node.has("result"))
			res = mapper.readValue(node.get("result"), cls);
		if (res == null && ret)
			throw new Exception("No return found");
		return res;
	}
	
	private static class UnclosableInputStream extends InputStream {
		private InputStream inner;
		private boolean isClosed = false;
		
		public UnclosableInputStream(InputStream inner) {
			this.inner = inner;
		}
		
		@Override
		public int read() throws IOException {
			if (isClosed)
				return -1;
			return inner.read();
		}
		
		@Override
		public int available() throws IOException {
			if (isClosed)
				return 0;
			return inner.available();
		}
		
		@Override
		public void close() throws IOException {
			isClosed = true;
		}
		
		@Override
		public synchronized void mark(int readlimit) {
			inner.mark(readlimit);
		}
		
		@Override
		public boolean markSupported() {
			return inner.markSupported();
		}
		
		@Override
		public int read(byte[] b) throws IOException {
			if (isClosed)
				return 0;
			return inner.read(b);
		}
		
		@Override
		public int read(byte[] b, int off, int len) throws IOException {
			if (isClosed)
				return 0;
			return inner.read(b, off, len);
		}
		
		@Override
		public synchronized void reset() throws IOException {
			if (isClosed)
				return;
			inner.reset();
		}
		
		@Override
		public long skip(long n) throws IOException {
			if (isClosed)
				return 0;
			return inner.skip(n);
		}
	}
}
