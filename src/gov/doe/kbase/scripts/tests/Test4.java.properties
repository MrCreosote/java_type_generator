package gov.doe.kbase.test4;

import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import junit.framework.Assert;

import gov.doe.kbase.Tuple2;
import gov.doe.kbase.UObject;
import gov.doe.kbase.test4.boolandobjecttest.BoolStruct;
import gov.doe.kbase.test4.boolandobjecttest.BoolandobjecttestClient;
import gov.doe.kbase.test4.boolandobjecttest.ObjectStruct;

public class Test4 {
	
	public Test4(BoolandobjecttestClient client) throws Exception {
		BoolStruct boolStr = new BoolStruct();
		Map<String, Boolean> map1 = new LinkedHashMap<String, Boolean>();
		map1.put("0", false);
		map1.put("1", true);
		Tuple2<Boolean, Boolean> tuple1 = new Tuple2<Boolean, Boolean>().withE1(true).withE2(false);
		boolStr.withVal1(false).withVal2(Arrays.asList(true, false, true)).withVal3(map1).withVal4(tuple1);
		Tuple2<Boolean, BoolStruct> ret1 = client.boolCheck(true, boolStr);
		Assert.assertTrue(ret1.getE1());
		checkBoolStruct(ret1.getE2());
		List<Object> forTest = Arrays.asList(5, "testing", 17.44, true, boolStr);
		for (Object val : forTest) {
			ObjectStruct objStr = new ObjectStruct().withVal1(val).withVal2(Arrays.asList(val));
			Map<String, Object> map2 = new LinkedHashMap<String, Object>();
			map2.put("key", val);
			Tuple2<Object, Object> tuple2 = new Tuple2<Object, Object>().withE1(val).withE2(null);
			objStr.withVal3(map2).withVal4(tuple2);
			Tuple2<Object, ObjectStruct> ret2 = client.objectCheck(val, objStr);
			checkObject(val, ret2.getE1());
			checkObject(val, ret2.getE2().getVal1());
			checkObject(val, ret2.getE2().getVal2().get(0));
			checkObject(val, ret2.getE2().getVal3().get("key"));
			checkObject(val, ret2.getE2().getVal4().getE1());
			Assert.assertNull(ret2.getE2().getVal4().getE2());
		}
	}

	private static void checkBoolStruct(BoolStruct e2) {
		Assert.assertFalse(e2.getVal1());
		Assert.assertEquals(3, e2.getVal2().size());
		Assert.assertTrue(e2.getVal2().get(0));
		Assert.assertEquals(2, e2.getVal3().size());
		Assert.assertFalse(e2.getVal3().get("0"));
		Assert.assertTrue(e2.getVal4().getE1());
	}
	
	private static void checkObject(Object expected, Object actual) {
		if (expected.getClass().getName().startsWith("java.lang.")) {
			Assert.assertEquals(expected, actual);
		} else {
			Assert.assertTrue(UObject.isMap(actual));
			Map<String, Object> map0 = UObject.asMap(actual);
			Assert.assertEquals(false, map0.get("val1"));
			Assert.assertTrue(UObject.isList(map0.get("val2")));
			List<Boolean> list1 = UObject.asList(map0.get("val2"));
			Assert.assertEquals(3, list1.size());
			Assert.assertTrue(list1.get(0));
			Assert.assertTrue(UObject.isMap(map0.get("val3")));
			Map<String, Boolean> map1 = UObject.asMap(map0.get("val3"));
			Assert.assertEquals(2, map1.size());
			Assert.assertFalse(map1.get("0"));
			Assert.assertTrue(UObject.isList(map0.get("val4")));
			List<Boolean> list2 = UObject.asList(map0.get("val4"));
			Assert.assertEquals(2, list2.size());
			Assert.assertTrue(list2.get(0));
		}
	}
		
	public static void main(String[] args) throws Exception {
		new Test4(new BoolandobjecttestClient("http://localhost:9999"));
	}
}