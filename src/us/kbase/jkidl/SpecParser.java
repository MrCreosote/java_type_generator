/* SpecParser.java */
/* Generated By:JavaCC: Do not edit this line. SpecParser.java */
package us.kbase.jkidl;

import java.io.*;

@SuppressWarnings({"unused", "serial"})
public class SpecParser implements SpecParserConstants {
        static String lastComment;

    public static void main(String args[]) throws Exception {
        String fileName = null;
        if (args.length < 1) {
            System.out.println("Usage: <program> <spec-file>");
                return;
        }
        fileName = args[0];
        SpecParser p = null;
        try {
            p = new SpecParser(new DataInputStream(new FileInputStream(fileName)));
        } catch (FileNotFoundException e) {
            System.out.println("File " + fileName + " not found.");
            return;
        }
        ParseNode root = p.SpecStatement();
        root.printTreeInfo();
        }

        public ParseNode getBeginPlaceNode(Token t) {
        ParseNode node = new ParseNode("BEG_PLACE");
                node.setProperty("LINE",""+t.beginLine);
        node.setProperty("COLUMN",""+t.beginColumn);
        return node;
        }

        public ParseNode getEndPlaceNode(Token t) {
        ParseNode node = new ParseNode("END_PLACE");
        node.setProperty("LINE",""+t.endLine);
        node.setProperty("COLUMN",""+t.endColumn);
        return node;
        }

  final public ParseNode SpecStatement() throws ParseException {ParseNode specNode = new ParseNode("SPEC");
  ParseNode includeListNode;
  ParseNode moduleListNode;
    includeListNode = IncludeList();
    moduleListNode = ModuleList();
    jj_consume_token(0);
specNode.addChild(includeListNode);
    specNode.addChild(moduleListNode);
    {if ("" != null) return specNode;}
    throw new Error("Missing return statement in function");
  }

  final public ParseNode IncludeList() throws ParseException {ParseNode retNode = new ParseNode("INCLUDES");
  ParseNode includeNode;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCLUDE_LITERAL:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      includeNode = Include();
retNode.addChild(includeNode);
    }
{if ("" != null) return retNode;}
    throw new Error("Missing return statement in function");
  }

  final public ParseNode Include() throws ParseException {Token begToken;
  Token pathToken;
  ParseNode retNode = new ParseNode("INCLUDE");
    //begToken = "#include"
      pathToken = jj_consume_token(INCLUDE_LITERAL);
retNode.setProperty("PATH", pathToken.toString());
    {if ("" != null) return retNode;}
    throw new Error("Missing return statement in function");
  }

  final public ParseNode ModuleList() throws ParseException {ParseNode retNode = new ParseNode("MODULES");
  ParseNode moduleNode;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_module:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      moduleNode = Module();
retNode.addChild(moduleNode);
    }
{if ("" != null) return retNode;}
    throw new Error("Missing return statement in function");
  }

  final public ParseNode Module() throws ParseException {ParseNode retNode = new ParseNode("MODULE");
  ParseNode elementNode;
  Token srvToken;
  Token nameToken;
  Token t;
srvToken = null;
    jj_consume_token(T_module);
if (lastComment != null)
            retNode.setProperty("comment", lastComment);
    lastComment = null;
    if (jj_2_1(2147483647)) {
      srvToken = jj_consume_token(S_IDENTIFIER);
      jj_consume_token(T_colon);
    } else {
      ;
    }
    nameToken = jj_consume_token(S_IDENTIFIER);
    jj_consume_token(T_figure_open_bracket);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_auth:
      case T_typedef:
      case T_funcdef:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_typedef:{
        elementNode = Typedef();
        break;
        }
      case T_funcdef:{
        elementNode = Funcdef();
        break;
        }
      case T_auth:{
        elementNode = Auth();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t = jj_consume_token(T_semicolon);
lastComment = null;
      //elementNode.addChild(getEndPlaceNode(t));
      retNode.addChild(elementNode);
    }
    jj_consume_token(T_figure_close_bracket);
    jj_consume_token(T_semicolon);
if (srvToken != null)
            retNode.setProperty("service", srvToken.toString());
    retNode.setProperty("name", nameToken.toString());
    {if ("" != null) return retNode;}
    throw new Error("Missing return statement in function");
  }

  final public ParseNode Typedef() throws ParseException {ParseNode node = new ParseNode("TYPEDEF");
  ParseNode typeNode;
  Token t;
    jj_consume_token(T_typedef);
if (lastComment != null)
            node.setProperty("comment", lastComment);
    lastComment = null;
    typeNode = Type();
    t = jj_consume_token(S_IDENTIFIER);
node.addChild(typeNode);
    node.setProperty("name", t.toString());
    //node.addChild(getEndPlaceNode(t));
    {if ("" != null) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ParseNode Type() throws ParseException {ParseNode node = new ParseNode("TYPE");
  ParseNode subNode;
  Token t;
  Token moduleToken;
  Token varToken;
t = null;
    moduleToken = null;
    varToken = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_string:{
      t = jj_consume_token(T_string);
      break;
      }
    case T_int:{
      t = jj_consume_token(T_int);
      break;
      }
    case T_float:{
      t = jj_consume_token(T_float);
      break;
      }
    case T_unobj:{
      t = jj_consume_token(T_unobj);
      break;
      }
    case T_list:{
      t = jj_consume_token(T_list);
      jj_consume_token(38);
      subNode = Type();
node.addChild(subNode);
      jj_consume_token(39);
      break;
      }
    case T_mapping:{
      t = jj_consume_token(T_mapping);
      jj_consume_token(38);
      subNode = Type();
node.addChild(subNode);
      jj_consume_token(T_comma);
      Type();
node.addChild(subNode);
      jj_consume_token(39);
      break;
      }
    case T_tuple:{
      t = jj_consume_token(T_tuple);
      jj_consume_token(38);
      subNode = Param();
node.addChild(subNode);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case T_comma:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        jj_consume_token(T_comma);
        subNode = Param();
node.addChild(subNode);
      }
      jj_consume_token(39);
      break;
      }
    case T_structure:{
      t = jj_consume_token(T_structure);
      jj_consume_token(T_figure_open_bracket);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case T_string:
        case T_int:
        case T_float:
        case T_unobj:
        case T_list:
        case T_mapping:
        case T_structure:
        case T_tuple:
        case S_IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_5;
        }
        subNode = StructItem();
        jj_consume_token(T_semicolon);
node.addChild(subNode);
      }
      jj_consume_token(T_figure_close_bracket);
      break;
      }
    case S_IDENTIFIER:{
      if (jj_2_2(2147483647)) {
        moduleToken = jj_consume_token(S_IDENTIFIER);
        jj_consume_token(T_dot);
      } else {
        ;
      }
      varToken = jj_consume_token(S_IDENTIFIER);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
node.setProperty("kind", t == null ? "ref" : t.toString());
    if (t == null) {
                if (moduleToken != null)
                        node.setProperty("module", moduleToken.toString());
                node.setProperty("ref", varToken.toString());
    }
    {if ("" != null) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ParseNode StructItem() throws ParseException {ParseNode node = new ParseNode("STRUCT_ITEM");
  ParseNode typeNode;
  Token t;
    typeNode = Type();
    t = jj_consume_token(S_IDENTIFIER);
node.addChild(typeNode);
node.setProperty("name", t.toString());
{if ("" != null) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ParseNode Auth() throws ParseException {ParseNode node = new ParseNode("AUTH");
  Token t;
    jj_consume_token(T_auth);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_required:{
      t = jj_consume_token(T_required);
      break;
      }
    case T_optional:{
      t = jj_consume_token(T_optional);
      break;
      }
    case T_none:{
      t = jj_consume_token(T_none);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
node.setProperty("kind", t.toString());
{if ("" != null) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ParseNode Funcdef() throws ParseException {ParseNode node = new ParseNode("FUNCDEF");
  ParseNode args;
  ParseNode ret;
  ParseNode auth;
  Token t;
    jj_consume_token(T_funcdef);
if (lastComment != null)
            node.setProperty("comment", lastComment);
    lastComment = null;
    t = jj_consume_token(S_IDENTIFIER);
    jj_consume_token(T_round_open_bracket);
    args = Params();
node.addChild(args);
    jj_consume_token(T_round_close_bracket);
    jj_consume_token(T_returns);
    jj_consume_token(T_round_open_bracket);
    ret = Params();
node.addChild(ret);
    jj_consume_token(T_round_close_bracket);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_auth:{
      auth = Auth();
node.addChild(auth);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
node.setProperty("name", t.toString());
    {if ("" != null) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ParseNode Params() throws ParseException {ParseNode node = new ParseNode("PARAMS");
  ParseNode paramNode;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_string:
    case T_int:
    case T_float:
    case T_unobj:
    case T_list:
    case T_mapping:
    case T_structure:
    case T_tuple:
    case S_IDENTIFIER:{
      paramNode = Param();
node.addChild(paramNode);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case T_comma:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_6;
        }
        jj_consume_token(T_comma);
        paramNode = Param();
node.addChild(paramNode);
      }
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
{if ("" != null) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ParseNode Param() throws ParseException {ParseNode node = new ParseNode("PARAM");
  ParseNode type;
  Token name = null;
    type = Type();
node.addChild(type);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case S_IDENTIFIER:{
      name = jj_consume_token(S_IDENTIFIER);
node.setProperty("name", name.toString());
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
{if ("" != null) return node;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(T_dot)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(T_colon)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SpecParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x200,0xc400,0xc400,0x8000000,0xff0000,0xff0000,0x3800,0x400,0x8000000,0xff0000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x20,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x2,0x2,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SpecParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SpecParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SpecParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SpecParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SpecParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SpecParser(SpecParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SpecParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[40];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
